const express = require('express');
// const bcrypt = require('bcrypt');


const mongoose = require('mongoose');

const bodyparser = require('body-parser');

const app = express();

const PORT = 4000;
const cors = require('cors');
app.use(cors());
app.use(bodyparser.json())



mongoose.connect("mongodb://127.0.0.1:27017/blogapp", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});
const PostModel = mongoose.model("massage", {
    title: String,
    description: String,
});
const userSchema = new mongoose.Schema({
    email: String,
    password: String,
    lastLoginTime: String,
});

const UserModel = mongoose.model('app', userSchema);

app.post("/api/posts", async (req, res) => {
    try {
        const { title, description } = req.body;


        const newPost = new PostModel({ title, description });
        await newPost.save();

        res.status(201).json({ message: "Post saved successfully" });
    } catch (error) {
        console.error("Error:", error);
        res.status(500).json({ error: "Failed to save post" });
    }
});



app.post('/login', async (req, res) => {
    try {
        const { email, password } = req.body;
        // const hashedPassword = await bcrypt.hash(password, 10);
        const user = new UserModel({ email, password });
        console.log("Received login request with email:", email, "and password:", password);


        if (user) {
            console.log(user);

            // user.lastLoginTime = new Date().toLocaleString('en-US', { timeZone: 'Asia/Kolkata' });
            // await user.save();
            res.json(user);


        } else {
            res.status(401).json({ error: 'Incorrect email or password' });
        }
    } catch (error) {
        console.error("Error during login:", error);
        res.status(500).json({ error: 'Could not fetch user' });
    }
});
app.get("/api/get", async (req, res) => {
    try {
        const posts = await PostModel.find(); // Fetch all posts from the database
        res.json(posts);
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Internal server error" });
    }
});




app.listen(PORT, () => console.log(`Server running on port ${PORT}`))